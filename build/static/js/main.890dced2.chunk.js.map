{"version":3,"sources":["components/Menu.jsx","components/GoBackButton.jsx","components/Items.jsx","components/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Menu","className","to","Component","GoBackButton","history","useHistory","type","onClick","goBack","items","this","props","map","item","key","name","quantity","price","length","About","App","state","exact","path","component","render","Items","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAiBeA,E,iLAZX,OACE,yBAAKC,UAAU,WACb,wBAAIA,UAAU,iBAAd,4BACA,wBAAIA,UAAU,QACZ,4BAAI,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,UAA/B,yCACJ,4BAAI,kBAAC,IAAD,CAAMD,UAAU,YAAYC,GAAG,UAA/B,oC,GAPKC,aCQJC,MARf,WACE,IAAIC,EAAUC,cAId,OAAO,4BAAQC,KAAK,SAASC,QAH7B,WACEH,EAAQI,WAEH,mCCWMC,E,iLAdH,IACDA,EAASC,KAAKC,MAAdF,MACP,OACE,6BACGA,EAAMG,KAAI,SAAAC,GACT,OAAO,uBAAGC,IAAKD,EAAKE,MAAb,qDAA8BF,EAAKE,KAAnC,mEAAuDF,EAAKG,SAA5D,+BAA8EH,EAAKI,UAE5F,8DAAWR,EAAMS,QACjB,kBAAC,EAAD,W,GATYhB,aCULiB,E,iLATX,OACE,6BACE,0IACA,kBAAC,EAAD,W,GALYjB,aCgCLkB,G,iNAxBbC,MAAQ,CACNZ,MAAO,CACL,CAACM,KAAM,QAASC,SAAU,EAAGC,MAAO,IACpC,CAACF,KAAM,QAASC,SAAU,EAAGC,MAAO,GACpC,CAACF,KAAM,QAASC,SAAU,EAAGC,MAAO,M,wEAI9B,IAAD,OACP,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,KAAI,kBAAC,IAAD,CAAUtB,GAAG,WACnC,kBAAC,IAAD,CAAOsB,KAAK,QAAQC,UAAWzB,IAC/B,kBAAC,IAAD,CAAOwB,KAAK,SAASE,OAAQ,kBAC3B,kBAACC,EAAD,CAAOjB,MAAO,EAAKY,MAAMZ,WAE3B,kBAAC,IAAD,CAAOc,KAAK,SAASC,UAAWL,U,GAnBxBjB,cCGEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OAAO,kBAAC,IAAD,KAAY,kBAAC,EAAD,OAAsBQ,SAASC,eAAe,SD4HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.890dced2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Menu extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section\">\r\n        <h1 className=\"section-title\">меню</h1>\r\n        <ul className=\"menu\">\r\n          <li><Link className=\"menu-link\" to='/items'>Товары</Link></li>\r\n          <li><Link className=\"menu-link\" to='/about'>О нас</Link></li>        \r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction GoBackButton() {\r\n  let history = useHistory();\r\n  function handleClick() {\r\n    history.goBack();\r\n  }\r\n  return <button type=\"button\" onClick={handleClick}>Назад</button>\r\n}\r\n\r\nexport default GoBackButton;","import React, { Component } from 'react';\r\nimport GoBackButton from './GoBackButton';\r\n\r\n\r\nclass items extends Component {  \r\n  render() {\r\n    const {items} = this.props;     \r\n    return (\r\n      <div>\r\n        {items.map(item => {\r\n          return <p key={item.name}>Название: {item.name}, Количество: {item.quantity}, Цена: {item.price}</p>\r\n        })}\r\n        <p>Итого: {items.length}</p>\r\n        <GoBackButton />                        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default items;","import React, { Component } from 'react';\r\nimport GoBackButton from  './GoBackButton'\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione laboriosam fugiat rerum et maxime dolores.</p>\r\n        <GoBackButton />        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport Menu from './components/Menu';\nimport Items from './components/Items';\nimport About from './components/About';\nimport './App.css';\n\n\n\nclass App extends Component {\n  \n  state = {\n    items: [\n      {name: 'item1', quantity: 1, price: 20},\n      {name: 'item2', quantity: 5, price: 5},\n      {name: 'item3', quantity: 3, price: 30}\n    ]\n  }\n\n  render() {\n    return (\n      <div className=\"App\">              \n        <Switch>\n          <Route exact path=\"/\"><Redirect to=\"/menu\" /></Route>\n          <Route path=\"/menu\" component={Menu}></Route>\n          <Route path=\"/items\" render={() => \n            <Items items={this.state.items} />\n          }/>\n          <Route path=\"/about\" component={About}/>\n        </Switch>              \n      </div>\n    )\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}